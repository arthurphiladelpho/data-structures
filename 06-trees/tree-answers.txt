1. Print both Trees to the console and compare the difference between your Binary Search Tree and your Heap.
    The Heap prints in ascending order by values and the BinaryTree prints in order from the root.
    
2. Insert all numbers from 1 to 100000 into both Trees, then use Benchmark to compare performance:

            user     system      total        real
tree insert 0.550000   0.010000   0.560000 (  0.570599)
heap insert 0.230000   0.010000   0.240000 (  0.236086)

tree find   0.000000   0.000000   0.000000 (  0.000015)
heap find   0.000000   0.000000   0.000000 (  0.000016)

tree delete 0.000000   0.000000   0.000000 (  0.000018)
heap delete 0.000000   0.000000   0.000000 (  0.000014)

    
    - How much time does an average insertion consume in the Binary Search Tree compared to the Heap?
    The insertion time in the heap takes under half the time for the tree.
    - How much time does finding 50000 in the Binary Search Tree consume compared to the Heap?
    It takes about the same time.
    - How much time does the average deletion consume in a Binary Search Tree compared to the Heap?
    The Heap is just a little faster.
    - When would you use a Binary Search Tree and why?
    I believe that Binary Trees are better when all the data is sorted.
    - When would you use an Heap and why?
    I'd use a Heap when speed is my main priority.
    